# For full documentation of the configuration options please
# see: https://github.com/golangci/golangci-lint#config-file.

# options for analysis running
run:
  # timeout for analysis, e.g. 30s, 5m, default is 1m
  deadline: 1m

  # list of build tags, all linters use it. Default is empty list.
  # build-tags:
  #   - <build-tag>

  # which dirs to skip: they won't be analyzed;
  # can use regexp here: generated.*, regexp is applied on full path;
  # default value is empty list, but next dirs are always skipped independently
  # from this option's value:
  #   	vendor$, third_party$, testdata$, examples$, Godeps$, builtin$
  # skip-dirs:
  #   - <pattern>

  # which files to skip: they will be analyzed, but issues from them
  # won't be reported. Default value is empty list, but there is
  # no need to include all autogenerated files, we confidently recognize
  # autogenerated files. If it's not please let us know.
  # skip-files:
  #   - <pattern>

# linters that we should / shouldn't run
linters:
  disable-all: true
  enable:
    - asciicheck
    - containedctx
    - contextcheck
    - deadcode
    - dupl
    - durationcheck
    - errcheck
    - errname
    - errorlint
    - exhaustive
    - exportloopref
    - gocritic
    - gocyclo
    - godot
    - gofumpt
    - goimports
    - gosimple
    - govet
    - ineffassign
    - misspell
    - nakedret
    - nolintlint
    - predeclared
    - revive
    - staticcheck
    - structcheck
    - tagliatelle
    - typecheck
    - unconvert
    - unparam
    - unused
    - varcheck

# all available settings of specific linters, we can set an option for
# a given linter even if we deactivate that same linter at runtime
linters-settings:
  dupl:
    # tokens count to trigger issue, 150 by default
    threshold: 150

  goconst:
    # minimal length of string constant, 3 by default
    min-len: 6
    # minimal occurrences count to trigger, 3 by default
    min-occurrences: 5

  gocritic:
    # which checks should be enabled; can't be combined with 'disabled-checks';
    # default are: [appendAssign assignOp caseOrder dupArg dupBranchBody dupCase flagDeref
    # ifElseChain regexpMust singleCaseSwitch sloppyLen switchTrue typeSwitchVar underef
    # unlambda unslice rangeValCopy defaultCaseOrder];
    #
    # List of available checks:
    # https://github.com/go-critic/go-critic/blob/master/docs/overview.md
    enabled-checks:
      # "diagnostic" checkers
      - caseOrder
      - deprecatedComment
      - dupArg
      - dupBranchBody
      - dupCase
      - dupSubExpr
      - exitAfterDefer
      - flagDeref
      - flagName
      - mapKey
      - nilValReturn
      - offBy1
      - sloppyTypeAssert
      - sprintfQuotedString
      - unnecessaryDefer
      # "style" checkers
      - assignOp
      - captLocal
      - commentedOutImport
      - defaultCaseOrder
      - deferUnlambda
      - dupImport
      - elseif
      - emptyFallthrough
      - emptyStringTest
      - hexLiteral
      - importShadow
      - initClause
      - ioutilDeprecated
      - newDeref
      - preferFilepathJoin
      - ptrToRefParam
      - redundantSprint
      - regexpMust
      - singleCaseSwitch
      - sloppyLen
      - switchTrue
      - timeExprSimplify
      - tooManyResultsChecker
      - typeAssertChain
      - typeSwitchVar
      - typeUnparen
      - underef
      - unlabelStmt
      - unlambda
      - unnecessaryBlock
      - unslice
      - valSwap
      # "performance" checkers
      - appendCombine
      - equalFold
      - indexAlloc
      - preferStringWriter
      - sliceClear
      - stringXbytes
    parameters:
      captLocal:
        paramsOnly: false
      tooManyResultsChecker:
        maxResults: 4

  gocyclo:
    # minimal code complexity to report, 30 by default (but we recommend 10-20)
    min-complexity: 20

  godot:
    scope: all

  gofumpt:
    lang-version: "1.17"

  goimports:
    # put imports beginning with prefix after 3rd-party packages;
    # it's a comma-separated list of prefixes
    local-prefixes: github.com/Helcaraxan/toolshare

  govet:
    # report about shadowed variables
    check-shadowing: true

  misspell:
    locale: UK

  nakedret:
    # make an issue if func has more lines of code than this setting and it has naked returns; default is 30
    max-func-lines: 0 # Warn on all naked returns.

  nolintlint:
    allow-unused: false
    allow-leading-space: false
    require-specific: true

  staticcheck:
    go: "1.17"

  tagliatelle:
    case:
      rules:
        json: snake
        yaml: snake

  unparam:
    # We assume that the toolshare repo is not intended to be used as a library for now.
    check-exported: true

  varcheck:
    # We assume that the toolshare repo is not intended to be used as a library for now.
    exported-fields: true

# rules to deal with reported isues
issues:
  # List of regexps of issue texts to exclude, empty list by default.
  # But independently from this option we use default exclude patterns,
  # it can be disabled by `exclude-use-default: false`. To list all
  # excluded by default patterns execute `golangci-lint run --help`
  # exclude:
  #   - <pattern>

  # Maximum issues count per one linter. Set to 0 to disable. Default is 50.
  max-per-linter: 0

  # Maximum count of issues with the same text. Set to 0 to disable. Default is 3.
  max-same-issues: 0

  # Show only new issues created after git revision `REV`
  new-from-rev: "" # Show all linter errors.
